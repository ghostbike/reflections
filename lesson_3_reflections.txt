When would you want to use a remote repository rather than keeping all your work
local?

    To share your work, especially when you're working with other developers on a 
    project that you want to collaborate on. Also from a portfolio perspective you
    want to be able to demo or show things without having your computer there.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Git gives you the choice of when to commit changes. The worst thing that could
    happen is changes submitted by another user flows down to your local repository
    without you knowing about it, corrupting your work.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clone means I copy the github files onto my computer and work with it as if it
    were a local repository. Fork is a clone that is all in github. With a fork, 
    the clone happens on github first, in a pure clone the clone happens to the local
    repository first then back to git hub
    
    The forking process is handled in github, then you clone, forking: git clone url
    when you pull a repository github sets up the repository too
    
    A branch is a side version of the repository that allows you to experiment without
    disturbing the master branch. It is not a fork and clone because it's a way point
    and not a starting point for working with a repository

What is the benefit of having a copy of the last known state of the remote
stored locally?

    If you're starting a new branch you want to start from the latest place you
    can otherwise the merge process will be a large undertaking with a lot of working
    reconciling past commits.
    
How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    You'd have to either sit next to each other and watch the other code or trade files
    and manually merge the changes. One person with the master controls everything. That
    being said, Git and GitHub make collaboration MUCH easier! I'm not sure what would
    be easier without it. My one guess is the mental overhead and technical ability needed
    to work with Git and GitHub. I'm sure it can get convoluted on big projects.
    
When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

	When you are collaborating and want to confirm changes with your coding partners, 
	that's when you want to make changes in a separate branch rather than in the master
	branch. Updating the master gets everyone on the same page, but could conflict
	with local changes that users have on their machines.
